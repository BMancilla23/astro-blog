---
import PostGrid from "@/components/PostGrid.astro";
import TypedPostCard from "@/components/TypedPostCard.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  /* const authors = await getCollection("author"); // Colección de autores
  const posts = await getCollection("blog", ({ data }) => !!data.date); */

  // Cargamos autores y posts en paralelo
  const [authors, posts] = await Promise.all([
    getCollection("author"),
    getCollection("blog", ({ data }) => !!data.date),
  ]);

  /*  // Sacamos IDs únicos de autores
  const authorIds = [...new Set(posts.map((p) => p.data.author.id))];

  return authorIds.map((authorId) => ({
    params: { author: authorId }, // usamos id directamente ✅
    props: {
      posts: posts.filter((p) => p.data.author.id === authorId),
      author: authorId,
    },
  })); */

  return authors.map((author) => ({
    params: { author: author.id },
    props: {
      author,
      posts: posts.filter((p) => p.data.author.id === author.id),
    },
  }));
}

const { posts, author } = Astro.props;

const { name: authorName } = author.data;
---

<MainLayout>
  <!--  <h1 class="text-3xl font-semibold text-white mb-6">
    Posts escritos por {author}
  </h1> -->

  <!-- Regresar -->
  <a
    href="/blog"
    class="mb-6 rounded bg-gray-800 px-4 py-2 text-sm font-medium text-white hover:bg-gray-700"
  >
    <Icon name="lucide:arrow-left" class="inline w-4 h-4 mr-1" />
    Regresar
  </a>
  {
    posts.length > 0 ? (
      /*  <PostGrid posts={posts} title={`Posts de ${authorName}`} /> */

      <PostGrid title={`Posts de ${authorName}`}>
        {posts.map((post) => (
          <TypedPostCard post={post} showAuthor={false} />
        ))}
      </PostGrid>
    ) : (
      <p class="text-gray-400">No hay posts escritos por este autor.</p>
    )
  }
</MainLayout>
